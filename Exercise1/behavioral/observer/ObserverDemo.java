package behavioral.observer;
import java.util.*;import java.util.logging.*;
interface Observer { void update(String event);}interface Subject { void register(Observer o); void unregister(Observer o); void notifyObservers(String event);}class ConcreteSubject implements Subject {private final List<Observer> observers = new ArrayList<>();private static final Logger LOG = Logger.getLogger(ConcreteSubject.class.getName());public void register(Observer o){ observers.add(o);}public void unregister(Observer o){ observers.remove(o);}public void notifyObservers(String event){LOG.info("Notifying observers: "+event); for(Observer o:observers)o.update(event);}public void changeState(String ev){ notifyObservers(ev);}}
class LoggingObserver implements Observer {private final String name;private static final Logger LOG = Logger.getLogger(LoggingObserver.class.getName());public LoggingObserver(String name){this.name=name;}public void update(String event){LOG.info(name+" received: "+event);}}
public class ObserverDemo {public static void run(){ConcreteSubject s=new ConcreteSubject();Observer o1=new LoggingObserver("Observer-1");Observer o2=new LoggingObserver("Observer-2");s.register(o1);s.register(o2);s.changeState("Event-A");s.unregister(o2);s.changeState("Event-B");}}
